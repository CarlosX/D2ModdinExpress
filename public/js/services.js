// Generated by CoffeeScript 1.4.0
(function() {
  "use strict";

  var LobbyService, global;

  global = this;

  LobbyService = (function() {

    function LobbyService($rootScope, $authService) {
      this.lobbies = [];
      this.publicLobbies = [
        {
          _id: "someid",
          banned: [],
          creator: "Quantum",
          creatorid: "someid",
          deleted: false,
          devMode: false,
          dire: [null, null, null, null, null],
          radiant: [null, null, null, null, null],
          enableGG: true,
          hasPassword: false,
          isPublic: true,
          mod: "ura55vChSgFo6LHgz",
          name: "Test Lobby",
          password: "",
          region: 1,
          requiresFullLobby: true,
          serverIP: "",
          state: 0,
          status: 0
        }
      ];
      this.socket = null;
      this.scope = $rootScope;
      this.auth = $authService;
      this.hasAuthed = false;
      this.status = {
        managerConnected: false,
        managerStatus: "Manager is not running / not connected to this steam."
      };
      this.colls = {
        lobbies: this.lobbies,
        publicLobbies: this.publicLobbies
      };
    }

    LobbyService.prototype.disconnect = function() {
      if (this.socket !== null) {
        this.socket.close();
        this.socket = null;
      }
      this.hasAuthed = false;
      return console.log("Disconnected.");
    };

    LobbyService.prototype.send = function(data) {
      if (!(this.socket != null)) {
        return;
      }
      return this.socket.publish('data', data);
    };

    LobbyService.prototype.sendAuth = function() {
      if (!this.auth.isAuthed) {
        return this.disconnect();
      } else {
        if (!this.hasAuthed) {
          if (!(this.socket != null)) {
            return this.connect();
          } else {
            return this.send({
              id: 'auth',
              uid: this.auth.user._id,
              key: this.auth.token
            });
          }
        }
      }
    };

    LobbyService.prototype.handleMsg = function(data) {
      var coll, id, idx, obj, op, upd, _i, _len, _ref, _results;
      switch (data.msg) {
        case "error":
          return $.pnotify({
            title: "Lobby Error",
            text: data.reason,
            type: "error"
          });
        case "chat":
          return this.scope.$broadcast('lobby:chatMsg', data.message);
        case "modneeded":
          return this.scope.$broadcast('lobby:modNeeded', data.name);
        case "installres":
          return this.scope.$broadcast('lobby:installres', data.success);
        case "colupd":
          _ref = data.ops;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            upd = _ref[_i];
            coll = this.colls[upd._c];
            op = upd._o;
            delete upd["_o"];
            delete upd["_c"];
            switch (op) {
              case "insert":
                _results.push(coll.push(upd));
                break;
              case "update":
                id = upd._id;
                delete upd["_id"];
                obj = _.findWhere(coll, {
                  _id: id
                });
                if (obj != null) {
                  _results.push(_.extend(obj, upd));
                } else {
                  _results.push(void 0);
                }
                break;
              case "remove":
                id = upd._id;
                obj = _.findWhere(coll, {
                  _id: id
                });
                if (obj != null) {
                  idx = coll.indexOf(obj);
                  if (idx !== -1) {
                    _results.push(coll.splice(idx, 1));
                  } else {
                    _results.push(void 0);
                  }
                } else {
                  _results.push(void 0);
                }
                break;
              default:
                _results.push(void 0);
            }
          }
          return _results;
      }
    };

    LobbyService.prototype.connect = function() {
      var so,
        _this = this;
      this.disconnect();
      console.log("Attempting connection...");
      this.socket = so = new XSockets.WebSocket('ws://127.0.0.1:4502/BrowserController');
      so.on('auth', function(data) {
        if (data.status) {
          $.pnotify({
            title: "Authenticated",
            text: "You are now authenticated with the lobby server.",
            type: "success"
          });
          return _this.hasAuthed = true;
        } else {
          _this.lobbies.length = 0;
          _this.publicLobbies.length = 0;
          _this.scope.$digest();
          $.pnotify({
            title: "Deauthed",
            text: "You are no longer authed with the lobby server.",
            type: "error"
          });
          return _this.hasAuthed = false;
        }
      });
      so.on('lobby', function(msg) {
        return _this.handleMsg(msg);
      });
      so.on('manager', function(msg) {
        if (msg.msg === 'status') {
          if (msg.status) {
            _this.status.managerConnected = true;
            return _this.status.managerStatus = "Manager running and ready.";
          } else {
            _this.status.managerConnected = false;
            return _this.status.managerStatus = "Manager has disconnected.";
          }
        }
      });
      so.on("close", function() {
        _this.lobbies.length = 0;
        _this.publicLobbies.length = 0;
        _this.scope.$digest();
        _this.status.managerConnected = false;
        _this.status.managerStatus = "You have lost connection with the lobby server...";
        _this.socket = null;
        return $.pnotify({
          title: "Disconnected",
          text: "Disconnected from the lobby server.",
          type: "error"
        });
      });
      return so.on("open", function(clientinfo) {
        console.log("OnOpen");
        $.pnotify({
          title: "Connected",
          text: "Connected to the lobby server",
          type: "success"
        });
        _this.lobbies.length = 0;
        _this.publicLobbies.length = 0;
        _this.scope.$digest();
        return _this.sendAuth();
      });
    };

    return LobbyService;

  })();

  angular.module("d2mp.services", []).factory("$authService", [
    "$interval", "$http", "$log", "$rootScope", function($interval, $http, $log, $rootScope) {
      var authService, updateAuth;
      updateAuth = function() {
        $http({
          method: "GET",
          url: "/data/authStatus"
        }).success(function(data, status, headers, config) {
          if (data.isAuthed !== authService.isAuthed) {
            $log.log("Authed: " + data.isAuthed);
            authService.isAuthed = data.isAuthed;
            $rootScope.$broadcast("auth:isAuthed", data.isAuthed);
          }
          authService.user = data.user;
          authService.token = data.token;
        }).error(function(data, status, headers, config) {
          $log.log("Error fetching auth status: " + data);
        });
      };
      authService = {};
      authService.update = updateAuth;
      updateAuth();
      $interval(updateAuth, 60000);
      return authService;
    }
  ]).factory("$lobbyService", [
    "$interval", "$log", "$authService", "$rootScope", function($interval, $log, $authService, $rootScope) {
      var service;
      service = new LobbyService($rootScope, $authService);
      $rootScope.$on("auth:isAuthed", function() {
        return service.sendAuth();
      });
      service.sendAuth();
      global.service = service;
      return service;
    }
  ]);

}).call(this);
