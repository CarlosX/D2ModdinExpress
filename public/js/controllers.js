// Generated by CoffeeScript 1.4.0
(function() {
  "use strict";

  angular.module("d2mp.controllers", []).controller("HomeCtrl", ["$scope", function($scope) {}]).controller("AboutCtrl", ["$scope", function($scope) {}]).controller("ModsCtrl", ["$scope", function($scope) {}]).controller("LobbyListCtrl", [
    "$scope", "$location", "$routeParams", "$rootScope", "$lobbyService", function($scope, $location, $routeParams, $rootScope, $lobbyService) {
      var mod, modName, publicLobbies;
      publicLobbies = $lobbyService.publicLobbies;
      $scope.hasMod = $routeParams.modname != null;
      modName = null;
      mod = null;
      if ($scope.hasMod) {
        modName = $routeParams.modname;
        $scope.mod = mod = _.findWhere($rootScope.mods, {
          name: modName
        });
      }
      $scope.lobbies = publicLobbies;
      $scope.createLobby = function() {
        if ($scope.hasMod) {
          return $lobbyService.createLobby(null, mod._id);
        } else {
          return $location.url('/newlobby');
        }
      };
      $scope.joinLobby = function(lobby) {
        console.log(lobby);
      };
      return $scope.getModThumbnail = function(modid) {
        mod = _.findWhere($rootScope.mods, {
          _id: modid
        });
        if (mod != null) {
          return mod.thumbnail;
        } else {
          return "";
        }
      };
    }
  ]).controller("AuthCtrl", [
    "$scope", "$authService", function($scope, $authService) {
      $scope.auth = $authService;
      $scope.startLogin = function() {
        window.location.href = "/auth/steam";
      };
      $scope.signOut = function() {
        window.location.href = "/logout";
      };
      return $scope.joinQueue = function() {
        window.location.href = "http://d2modd.in/";
      };
    }
  ]).controller("InstallModCtrl", [
    "$scope", "$lobbyService", "$routeParams", "$rootScope", "$location", function($scope, $lobbyService, $routeParams, $rootScope, $location) {
      var mod, modname;
      modname = $routeParams.modname;
      if (!(modname != null)) {
        return $location.url('/mods');
      }
      mod = _.findWhere($rootScope.mods, {
        name: modname
      });
      if (!(mod != null)) {
        $location.url('/mods');
        return $.pnotify({
          title: "Mod Not Found",
          text: "The mod you wanted to install can't be found.",
          type: "error"
        });
      }
      $scope.status = $lobbyService.status;
      return $scope.startInstall = function() {
        return $lobbyService.installMod(mod.name);
      };
    }
  ]).controller("CreateLobbyCtrl", [
    "$scope", "$location", "$lobbyService", "$authService", function($scope, $location, $lobbyService, $authService) {
      $scope.isAuthed = $authService.isAuthed;
      $scope.user = $authService.user;
      return $scope.selectMod = function(mod) {
        var name;
        name = $("#lobbyName").val();
        name = name === "" ? null : name;
        return $lobbyService.createLobby(name, mod._id);
      };
    }
  ]).controller("BottomBarCtrl", [
    "$scope", "$authService", "$lobbyService", function($scope, $authService, $lobbyService) {
      $scope.auth = $authService;
      return $scope.status = $lobbyService.status;
    }
  ]).controller('LobbyCtrl', [
    "$scope", "$authService", "$lobbyService", "$location", "$rootScope", function($scope, $authService, $lobbyService, $location, $rootScope) {
      var generateEmptySlots, getEmptySlots, list, lobby, mod;
      list = [];
      if (!$authService.isAuthed || $lobbyService.lobbies.length === 0) {
        return $location.url('/lobbies');
      }
      lobby = $scope.lobby = $lobbyService.lobbies[0];
      $scope.status = $lobbyService.status;
      mod = $scope.mod = _.findWhere($rootScope.mods, {
        _id: lobby.mod
      });
      $scope.isHost = $scope.lobby.creatorid === $authService.user._id;
      if ($scope.isHost) {
        $scope.changeTitle = function() {
          var title;
          title = $(".titleInput").val();
          $lobbyService.changeTitle(title);
          return title.blur();
        };
        $scope.changeRegion = function(newVal) {
          return $lobbyService.changeRegion(newVal);
        };
        $scope.stopFinding = function() {
          return $lobbyService.stopFinding();
        };
        $scope.sendConnect = function() {
          return $lobbyService.sendConnect();
        };
      }
      $scope.leaveLobby = function() {
        return $lobbyService.leaveLobby();
      };
      $scope.kickPlayer = function(player) {
        return $lobbyService.kickPlayer(player);
      };
      $scope.takeSlot = function(goodguys) {
        return $lobbyService.switchTeam(goodguys);
      };
      $scope.startQueue = function() {
        return $lobbyService.startQueue();
      };
      $scope.sendMessage = function() {
        var msg;
        msg = $("#chatInput").val();
        $("#chatInput").val("");
        if (msg === "") {
          return;
        }
        return $lobbyService.sendChat(msg);
      };
      getEmptySlots = function(team) {
        var player, playerCount, slotCount, slots, _i, _len;
        playerCount = 0;
        for (_i = 0, _len = team.length; _i < _len; _i++) {
          player = team[_i];
          if (!(player != null)) {
            continue;
          }
          playerCount += 1;
        }
        slotCount = 5 - playerCount;
        slots = [];
        while (slotCount--) {
          slots.push(null);
        }
        return slots;
      };
      generateEmptySlots = function() {
        $scope.direSlots = getEmptySlots(lobby.dire);
        return $scope.radiantSlots = getEmptySlots(lobby.radiant);
      };
      generateEmptySlots();
      list.push($rootScope.$on('lobbyUpdate:lobbies', function(event, op) {
        if (op !== "update") {
          return;
        }
        return generateEmptySlots();
      }));
      list.push($rootScope.$on('lobby:chatMsg', function(event, msg) {
        var box;
        box = $(".chatBox");
        if (box.length === 0) {
          return;
        }
        box.val(box.val() + "\n" + msg);
        return box.scrollTop(box[0].scrollHeight);
      }));
      return $scope.$on("$destroy", function() {
        var l, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = list.length; _i < _len; _i++) {
          l = list[_i];
          _results.push(l());
        }
        return _results;
      });
    }
  ]).controller("ModDetailCtrl", function($scope, $rootScope, $routeParams, $location, $sce) {
    var mod, modname;
    modname = $routeParams.modname;
    mod = _.findWhere($rootScope.mods, {
      name: modname
    });
    if (mod == null) {
      $location.url("/mods/");
      return;
    }
    $scope.btnClass = (mod.playable ? "" : "disabled");
    $scope.mod = mod;
  });

}).call(this);
